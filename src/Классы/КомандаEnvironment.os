#Использовать fs
#Использовать json
#Использовать strings
#Использовать 1commands

Процедура ОписаниеКоманды(Команда) Экспорт
	Команда.Опция("path", "", "Строка. Обязательный параметр. 
	|				Путь куда будет сохранен файл ""environment.properties""." + Символы.ПС)
	.ТСтрока()
	.Обязательный(Истина);
	
	Команда.Опция("v8version", "", "Строка. Версия платформы 1с." + Символы.ПС)
	.ТСтрока()
	.Обязательный(Ложь);
	
	Команда.Опция("os", , "Булево. Добавлять имя ОС и версию. По умолчанию ""Ложь""" + Символы.ПС)
	.Флаговый()
	.ПоУмолчанию(Ложь)
	.Обязательный(Ложь);
	
	Команда.Опция("oscriptversion", "", "Булево. Версия OneScript. По умолчанию ""Ложь""" + Символы.ПС)
	.Флаговый()
	.ПоУмолчанию(Ложь)
	.Обязательный(Ложь);
	
	Команда.Опция("vrunenrVersion", "", "Булево. Версия Vanessa-runner. По умолчанию ""Ложь""" + Символы.ПС)
	.Флаговый()
	.ПоУмолчанию(Ложь)
	.Обязательный(Ложь);
	
	// Не понятно какой командой получить, если используется add
	// временно оставлю строковым для указания вручную
	Команда.Опция("add", , "Булево. Используется Vanessa Automation Driven Development,
		| 				добавляет версию." + Символы.ПС)
	//.Флаговый()
	//.ПоУмолчанию(Ложь)
	.ТСтрока()
	.Обязательный(Ложь);
	
	// Не понятно какой командой получить, если используется VASingle
	// временно оставлю строковым для указания вручную
	Команда.Опция("vaVersion", , "Строка. Используется Vanessa Automation, добавляет версию." + Символы.ПС)
	.ТСтрока()
	.Обязательный(Ложь);
	
	Команда.Опция("sha", , "Строка. SHA коммита на котором выполнялись тесты." + Символы.ПС)
	//.Флаговый()
	.ТСтрока()
	//.ПоУмолчанию(Ложь)
	.Обязательный(Ложь);
	
	Команда.Опция("branch", , "Строка .Ветка коммита на котором выполнялись тесты." + Символы.ПС)
	//.Флаговый()
	.ТСтрока()
	//.ПоУмолчанию(Ложь)
	.Обязательный(Ложь);
	
	Команда.Опция("repoUrl", , "Строка. URL на проект\pipeline\commit на котором выполнялись тесты." + Символы.ПС)
	//.Флаговый()
	.ТСтрока()
	//.ПоУмолчанию(Ложь)
	.Обязательный(Ложь);
	
КонецПроцедуры

Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	
	ПутьКРезультатам = Команда.ЗначениеОпции("path");

	Если НЕ ЗначениеЗаполнено(ПутьКРезультатам) Тогда
		Команда.ВывестиСправку();
	КонецЕсли;
		
	ПутьКФайлу = ФС.ОбъединитьПути(ПутьКРезультатам, "environment.properties");
	
	ОпцииКоманды = Команда.ПараметрыКоманды();
	
	ФайлПараметров = Новый ТекстовыйДокумент();
		
	Для Каждого Опция Из ОпцииКоманды Цикл
		
		Ключ = СтрЗаменить(Опция.Ключ, "--", "");
		
		Если Ключ = "path" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Опция.Значение) = Тип("Булево")
			И Опция.Значение Тогда
			
			Версия = ПолучитьВерсию(Ключ);
			
			Если ПустаяСтрока(Версия) Тогда
				Сообщить("Не удалось определить версию.");
				Продолжить;
			КонецЕсли;
			
			ФайлПараметров.ДобавитьСтроку(Ключ + "=" + Версия);
			
		ИначеЕсли ТипЗнч(Опция.Значение) = Тип("Строка")
			И (НЕ ПустаяСтрока(Опция.Значение)) Тогда
				
			Версия = Опция.Значение;
			ФайлПараметров.ДобавитьСтроку(Ключ + "=" + Версия);
				
		КонецЕсли;

	КонецЦикла;

	ФайлПараметров.Записать(ПутьКФайлу);
	
КонецПроцедуры

Функция ПолучитьВерсию(Знач Ключ)
	
	Версия = Неопределено;

	КомандаЗапроса = Новый Команда();
	КомандаЗапроса.ПоказыватьВыводНемедленно(Ложь);
	
	ШаблонДляПроверки = "**.**.**.**";
	
	СистемнаяИнформация = Новый СистемнаяИнформация;

	Если Ключ = "os" Тогда
		
		// КомандаЗапроса.УстановитьКоманду("ver");
		// КомандаЗапроса.Исполнить();
		
		// Результат = КомандаЗапроса.ПолучитьВывод();
		
		// Если ТипЗнч(Результат) = Тип("Строка") Тогда
		// 	Результат = СтрЗаменить(Результат, "]", "");
		// 	Версия = Прав(Результат, 15);
		// Иначе
		// 	Версия = "";
		// КонецЕсли;

		Версия = СистемнаяИнформация.ВерсияОС;
		
	ИначеЕсли Ключ = "oscriptversion" Тогда
		
		// КомандаЗапроса.УстановитьКоманду("oscript");
		// КомандаЗапроса.ДобавитьПараметр(" --version");
		// КомандаЗапроса.Исполнить();
		
		// Результат = КомандаЗапроса.ПолучитьВывод();
		// Результат = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(Результат, " ");
		
		// Версия = СокрЛП(Лев(Результат[4], 10));

		Версия = СистемнаяИнформация.Версия;
		
	ИначеЕсли Ключ = "vrunenrVersion" Тогда
		
		КомандаЗапроса.УстановитьКоманду("vrunner");
		КомандаЗапроса.ДобавитьПараметр("version");
		КомандаЗапроса.Исполнить();
		
		Версия = КомандаЗапроса.ПолучитьВывод();
		ШаблонДляПроверки = "**.**.**";
		
	Иначе
		// для вывода версии add нужно парсить файл packagedef в каталоге установки.
		// предусмотреть вариант указания пути до каталога add (?)
		Сообщить("Для add/VASingle вывод версии не реализован.");
	КонецЕсли;
	
	ВерсияСоответствуетШаблону = СтроковыеФункции.СтрокаСоответствуетШаблону(Версия, ШаблонДляПроверки);
	
	Если НЕ ВерсияСоответствуетШаблону Тогда
		ВызватьИсключение "Не удалось определить версию.";
	КонецЕсли;
	
	Если Версия = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат Версия;
	КонецЕсли;
	
КонецФункции
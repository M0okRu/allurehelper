#Использовать fs
#Использовать strings
#Использовать json

//TODO: переделать по аналогии с categories.json
//создавать и заполнять файл без необходимости хранить его в репозитории
//добавить параметр --count (--depth) количество массивов в json с данными
//данные получать по api gitlab
//или оставить как есть, для гитлаба работать с этим файлом по аналогии с history

Процедура ОписаниеКоманды(Команда) Экспорт
	
	Команда.Опция("path", "", "Путь куда будет сохранен файл")
	.ТСтрока()
	.Обязательный(Истина);
	
	Команда.Опция("name", "", "Имя CI")
	.ТСтрока()
	.Обязательный(Истина);
	
	Команда.Опция("type", "", "Тип CI")
	.ТСтрока()
	.Обязательный(Истина);
	
	Команда.Опция("url", "", "URL CI")
	.ТСтрока()
	.Обязательный(Истина);
	
	Команда.Опция("buildOrder", "", "Pipeline ID")
	.ТЧисло()
	.Обязательный(Истина);
	
	Команда.Опция("buildName", "", "Имя билда(содержание коммита, коментарий коммита etc.)")
	.ТСтрока()
	.Обязательный(Истина);
	
	Команда.Опция("buildUrl", "", "Pipeline URL")
	.ТСтрока()
	.Обязательный(Истина);
	
	Команда.Опция("reportUrl", "", "URL на опубликованный отчет Allure")
	.ТСтрока()
	.Обязательный(Истина);
	
КонецПроцедуры

Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	
	ПутьКРезультатам = СокрЛП(Команда.ЗначениеОпции("path"));
	
	Если НЕ ЗначениеЗаполнено(ПутьКРезультатам) Тогда
		ВызватьИсключение "Не заполнен параметр ""path"".";
	КонецЕсли;
	
	Если НЕ ФС.КаталогСуществует(ПутьКРезультатам) Тогда
		ФС.ОбеспечитьКаталог(ПутьКРезультатам);
	КонецЕсли;
	
	ПутьКФайлу = ФС.ОбъединитьПути(ПутьКРезультатам, "executors.json");
	
	Если НЕ ФС.ФайлСуществует(ПутьКФайлу) Тогда
		ВызватьИсключение "Не найден файл executors.json";
	КонецЕсли;
	
	ЗаполнитьФайл(ПутьКФайлу, Команда);
	
КонецПроцедуры

Процедура ЗаполнитьФайл(Знач ПутьКФайлу, Знач Команда)
	
	Файл = СтроковыеФункции.ПрочитатьФайл(ПутьКФайлу);
	
	Если СтрДлина(Файл) = 0 Тогда
		МассивИзФайла = Новый Массив;
	Иначе
		ПарсерJson = Новый ПарсерJSON();		
		МассивИзФайла = ПарсерJson.ПрочитатьJSON(Файл);		
	КонецЕсли;
	
	СоответствиеПараметров = ПодготовитьСоответствиеИзПараметров(Команда);

	Если СоответствиеПараметров.Количество() = 0 Тогда
		ВызватьИсключение "Не заполнен ни один параметр команды!";
	КонецЕсли;

	МассивИзФайла.Вставить(0, СоответствиеПараметров);
	
	Запись = Новый ЗаписьJSON();
	
	Запись.ОткрытьФайл(ПутьКФайлу, , , Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, Символы.Таб));
	
	Попытка
		ЗаписатьJSON(Запись, МассивИзФайла);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Запись.Закрыть();
	
КонецПроцедуры

Функция ПодготовитьСоответствиеИзПараметров(Знач Команда)
	
	СоответствиеПараметров = Новый Соответствие();

	ОпцииКоманды = Команда.ПараметрыКоманды();

	Для Каждого Опция Из ОпцииКоманды Цикл
		Если Опция.Ключ = "--path" 
			Или (Не ЗначениеЗаполнено(Опция.Значение)) Тогда
			Продолжить;
		КонецЕсли;
		Ключ = СтрЗаменить(Опция.Ключ, "--", "");
		СоответствиеПараметров.Вставить(Ключ, Опция.Значение);
	КонецЦикла;
	
	//СоответствиеПараметров.Вставить("name", Команда.ЗначениеОпции("name"));
	//СоответствиеПараметров.Вставить("type", Команда.ЗначениеОпции("type"));
	//СоответствиеПараметров.Вставить("url", Команда.ЗначениеОпции("url"));
	//СоответствиеПараметров.Вставить("buildOrder", Команда.ЗначениеОпции("buildOrder"));
	//СоответствиеПараметров.Вставить("buildName", Команда.ЗначениеОпции("buildName"));
	//СоответствиеПараметров.Вставить("buildUrl", Команда.ЗначениеОпции("buildUrl"));
	//СоответствиеПараметров.Вставить("reportUrl", Команда.ЗначениеОпции("reportUrl"));
	
	Возврат СоответствиеПараметров;
	
КонецФункции